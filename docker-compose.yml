version: '3.8'

services:
  # PostgreSQL Database for n8n backend
  postgres:
    image: postgres:15-alpine
    container_name: n8n-postgres
    platform: linux/arm64
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8n_password}
      POSTGRES_NON_ROOT_USER: ${POSTGRES_NON_ROOT_USER:-n8n}
      POSTGRES_NON_ROOT_PASSWORD: ${POSTGRES_NON_ROOT_PASSWORD:-n8n_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs:/var/log/postgresql:rw
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  # Redis for caching and session management (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    platform: linux/arm64
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  # n8n workflow automation platform
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-orchestrator
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      # Database configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8n_password}
      
      # Redis configuration
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      
      # n8n configuration
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678/}
      N8N_EDITOR_BASE_URL: ${N8N_EDITOR_BASE_URL:-http://localhost:5678/}
      
      # Security and authentication
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-admin_password}
      
      # Encryption key for credentials
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-your_encryption_key_here}
      
      # Workflow execution
      EXECUTIONS_PROCESS: main
      EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_DB: 2
      
      # File system paths
      N8N_USER_FOLDER: /home/node/.n8n
      N8N_LOG_LEVEL: ${N8N_LOG_LEVEL:-info}
      N8N_LOG_OUTPUT: file
      N8N_LOG_FILE_LOCATION: /logs/n8n.log
      
      # Timezone
      GENERIC_TIMEZONE: ${TIMEZONE:-UTC}
      
      # Allow custom nodes
      N8N_CUSTOM_EXTENSIONS: /home/node/.n8n/custom
      
      # Email configuration (for alerting)
      N8N_EMAIL_MODE: ${N8N_EMAIL_MODE:-smtp}
      N8N_SMTP_HOST: ${N8N_SMTP_HOST}
      N8N_SMTP_PORT: ${N8N_SMTP_PORT:-587}
      N8N_SMTP_USER: ${N8N_SMTP_USER}
      N8N_SMTP_PASS: ${N8N_SMTP_PASS}
      N8N_SMTP_SENDER: ${N8N_SMTP_SENDER}
      
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/workflows:rw
      - ./outputs:/outputs:rw
      - ./logs:/logs:rw
      - ./custom-nodes:/home/node/.n8n/custom:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - n8n-network

  # Grafana for data visualization and monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: n8n-grafana
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Security
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin_password}
      
      # Database configuration (using same PostgreSQL instance)
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: ${POSTGRES_USER:-n8n}
      GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-n8n_password}
      
      # Server configuration
      GF_SERVER_ROOT_URL: ${GF_SERVER_ROOT_URL:-http://localhost:3000}
      GF_SERVER_SERVE_FROM_SUB_PATH: false
      
      # Provisioning
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      
      # Plugins
      GF_INSTALL_PLUGINS: ${GF_INSTALL_PLUGINS:-grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel}
      
      # Anonymous access (disable in production)
      GF_AUTH_ANONYMOUS_ENABLED: ${GF_AUTH_ANONYMOUS_ENABLED:-false}
      
      # Logging
      GF_LOG_LEVEL: ${GF_LOG_LEVEL:-info}
      GF_LOG_MODE: file
      
      # Feature toggles
      GF_FEATURE_TOGGLES_ENABLE: ${GF_FEATURE_TOGGLES:-}
      
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./logs:/var/log/grafana:rw
      - ./outputs:/var/lib/grafana/outputs:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - n8n-network

  # Optional: Nginx reverse proxy for production deployment
  nginx:
    image: nginx:alpine
    container_name: n8n-nginx
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx:rw
    depends_on:
      - n8n
      - grafana
    networks:
      - n8n-network
    profiles:
      - production

  # Log aggregation service (optional)
  logrotate:
    image: alpine:latest
    container_name: n8n-logrotate
    platform: linux/arm64
    restart: unless-stopped
    command: |
      sh -c "
        apk add --no-cache logrotate dcron &&
        echo '*/15 * * * * /usr/sbin/logrotate /etc/logrotate.conf' | crontab - &&
        crond -f
      "
    volumes:
      - ./logs:/logs:rw
      - ./logrotate.conf:/etc/logrotate.conf:ro
    networks:
      - n8n-network
    profiles:
      - logging

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis
  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/n8n
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/grafana

# Network configuration
networks:
  n8n-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: n8n-bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1