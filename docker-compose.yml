version: '3.8'

services:
  # PostgreSQL Database for n8n backend
  postgres:
    image: postgres:15-alpine
    container_name: n8n-postgres
    platform: linux/arm64
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8n_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  # Redis for caching and session management (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    platform: linux/arm64
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  # n8n workflow automation platform
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-orchestrator
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      # Database configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8n_password}
      DB_POSTGRESDB_SSL_ENABLED: "false"
      
      # n8n configuration
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678/}
      N8N_EDITOR_BASE_URL: ${N8N_EDITOR_BASE_URL:-http://localhost:5678/}
      
      # Security and authentication
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-admin_password}
      
      # Encryption key for credentials
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-your_encryption_key_here}
      
      # Workflow execution
      EXECUTIONS_PROCESS: main
      EXECUTIONS_MODE: regular
      
      # Performance and limits
      N8N_PAYLOAD_SIZE_MAX: ${N8N_PAYLOAD_SIZE_MAX:-16}
      N8N_BINARY_DATA_BUFFER_SIZE: ${N8N_BINARY_DATA_BUFFER_SIZE:-10}
      EXECUTIONS_DATA_MAX_AGE: ${EXECUTIONS_DATA_MAX_AGE:-336}
      
      # File system paths
      N8N_USER_FOLDER: /home/node/.n8n
      N8N_LOG_LEVEL: ${N8N_LOG_LEVEL:-info}
      
      # Timezone
      GENERIC_TIMEZONE: ${TIMEZONE:-UTC}
      
      # Allow custom nodes
      N8N_CUSTOM_EXTENSIONS: /home/node/.n8n/custom
      
      # Metrics and monitoring
      N8N_METRICS: ${N8N_METRICS:-true}
      N8N_METRICS_PREFIX: n8n_
      
      # Email configuration (for alerting)
      N8N_EMAIL_MODE: ${N8N_EMAIL_MODE:-smtp}
      N8N_SMTP_HOST: ${N8N_SMTP_HOST}
      N8N_SMTP_PORT: ${N8N_SMTP_PORT:-587}
      N8N_SMTP_USER: ${N8N_SMTP_USER}
      N8N_SMTP_PASS: ${N8N_SMTP_PASS}
      N8N_SMTP_SENDER: ${N8N_SMTP_SENDER}
      
      # API Keys for workflows
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/workflows:rw
      - ./outputs:/outputs:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - n8n-network

  # Grafana for data visualization and monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: n8n-grafana
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      # Security
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin_password}
      
      # Server configuration
      GF_SERVER_ROOT_URL: ${GF_SERVER_ROOT_URL:-http://localhost:3000}
      GF_SERVER_SERVE_FROM_SUB_PATH: false
      
      # Provisioning
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      
      # Logging
      GF_LOG_LEVEL: ${GF_LOG_LEVEL:-info}
      
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - n8n-network

  # Frontend Dashboard
  frontend:
    image: nginx:alpine
    container_name: n8n-frontend
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
    networks:
      - n8n-network
    depends_on:
      - n8n

  # Nginx reverse proxy with SSL termination and load balancing
  nginx:
    image: nginx:alpine
    container_name: n8n-nginx
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      NGINX_ENVSUBST_TEMPLATE_DIR: /etc/nginx/templates
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/conf.d
      N8N_HOST: n8n
      N8N_PORT: 5678
      GRAFANA_HOST: grafana
      GRAFANA_PORT: 3000
      SERVER_NAME: ${SERVER_NAME:-localhost}
    volumes:
      - ./nginx/templates:/etc/nginx/templates:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:rw
      - ./logs:/var/log/nginx:rw
      - ./nginx/html:/usr/share/nginx/html:ro
    depends_on:
      - n8n
      - grafana
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:80/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - n8n-network
    profiles:
      - production

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: n8n-prometheus
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.route-prefix=/'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - n8n
      - grafana
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - n8n-network
    profiles:
      - monitoring

  # Alertmanager for handling alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: n8n-alertmanager
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:9093/-/healthy || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - n8n-network
    profiles:
      - monitoring

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: n8n-node-exporter
    platform: linux/arm64
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - n8n-network
    profiles:
      - monitoring

  # Backup service for automated database backups
  backup:
    image: postgres:15-alpine
    container_name: n8n-backup
    platform: linux/arm64
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8n_password}
      BACKUP_KEEP_DAYS: ${BACKUP_KEEP_DAYS:-7}
      BACKUP_KEEP_WEEKS: ${BACKUP_KEEP_WEEKS:-4}
      BACKUP_KEEP_MONTHS: ${BACKUP_KEEP_MONTHS:-6}
    volumes:
      - ./scripts:/scripts:ro
      - ./backups:/backups:rw
      - ./logs:/logs:rw
    command: |
      sh -c "
        echo '0 2 * * * /scripts/backup.sh' | crontab - &&
        crond -f
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - n8n-network
    profiles:
      - backup

  # Log aggregation service (optional)
  logrotate:
    image: alpine:latest
    container_name: n8n-logrotate
    platform: linux/arm64
    restart: unless-stopped
    command: |
      sh -c "
        apk add --no-cache logrotate dcron &&
        echo '*/15 * * * * /usr/sbin/logrotate /etc/logrotate.conf' | crontab - &&
        crond -f
      "
    volumes:
      - ./logs:/logs:rw
      - ./logrotate.conf:/etc/logrotate.conf:ro
    networks:
      - n8n-network
    profiles:
      - logging

# Named volumes for data persistence
volumes:
  postgres_data:
  redis_data:
  n8n_data:
  grafana_data:
  prometheus_data:
  alertmanager_data:

# Network configuration
networks:
  n8n-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: n8n-bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1